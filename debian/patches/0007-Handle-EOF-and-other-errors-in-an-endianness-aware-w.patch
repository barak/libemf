From: Balint Reczey <balint.reczey@canonical.com>
Date: Tue, 29 Jan 2019 21:42:44 +0700
Subject: Handle EOF and other errors in an endianness-aware way

Closes: #919766
---
 libemf/libemf.cpp | 33 +++++++++++++++++++--------------
 1 file changed, 19 insertions(+), 14 deletions(-)

diff --git a/libemf/libemf.cpp b/libemf/libemf.cpp
index 0353335..6dfdf6c 100644
--- a/libemf/libemf.cpp
+++ b/libemf/libemf.cpp
@@ -1025,18 +1025,16 @@ extern "C" {
 
     ::EMR emr;
 
-    // Peek at the first word to determine the file type.
-    size_t ret = ::fread( &emr.iType, sizeof(emr.iType), 1, fp );
-
-    if ( ret == 0 || emr.iType != EMR_HEADER ) {
+    try {
+      dc->ds >> emr;
+    }
+    catch (const std::runtime_error& e ) {
       ::fclose( fp );
       DeleteDC( dc->handle );
       return 0;
     }
 
-    ret = ::fread( &emr.nSize, sizeof(emr.nSize), 1, fp );
-
-    if ( ret == 0 ) {
+    if ( emr.iType != EMR_HEADER ) {
       ::fclose( fp );
       DeleteDC( dc->handle );
       return 0;
@@ -1065,10 +1063,11 @@ extern "C" {
       // Peek at the next record type. This is the only context where
       // EOF is not an error.
 
-      ret = ::fread( &emr.iType, sizeof(emr.iType), 1, fp );
-
-      if ( ret == 0 ) {
-        if ( ! feof( fp ) ) {
+      try {
+        dc->ds >> emr.iType;
+      }
+      catch (const std::runtime_error& e ) {
+        if ( !feof( fp ) ) {
           std::cerr << "GetEnhMetaFileW read error. cannot continue"
                     << std::endl;
         }
@@ -1077,9 +1076,15 @@ extern "C" {
 
       // Peek at the record size.
 
-      ret = ::fread( &emr.nSize, sizeof(emr.nSize), 1, fp );
-
-      if ( ret == 0 || emr.nSize == 0 ) {
+      try {
+        dc->ds >> emr.nSize;
+      }
+      catch (const std::runtime_error& e ) {
+	std::cerr << "GetEnhMetaFileW read error. cannot continue"
+		  << std::endl;
+        break;
+      }
+      if ( emr.nSize == 0 ) {
 	std::cerr << "GetEnhMetaFileW read error. cannot continue"
 		  << std::endl;
         break;
